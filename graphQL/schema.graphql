type Query {
  getAllUsers: [User]
  getAllPosts: [Post]
  getUserByID(userID: String!): User
  getUserByEmail(email: String!): User
  getPostByID(postID: String!): Post
  getIncompletePostsForUser(userID: String!): [Post]
  getNotificationPostForUser(userID: String!): [ReviewerStatus]
}

type Mutation {
  createUser(input: UserInput!): User!
  createPost(input: PostInput!): Post!
  createLike(input: LikeInput!): Like!
  createComment(input: CommentInput!): Comment!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  profilePictureUrl: String
}

type ReviewerStatus {
  id: ID!
  reviewer: User!
  isReviewComplete: Boolean!
  post: Post!
}

type Comment {
  id: ID!
  comment: String
  createdBy: User!
  createdAt: String
}

type Like {
  id: ID!
  like: Boolean
  createdBy: User!
  createdAt: String
}

type Post {
  id: ID!
  question: String!
  isComplete: Boolean
  createdBy: User!
  createdAt: String
  reviewers: [ReviewerStatus!]!
  comments: [Comment!]
  likes: [Like!]
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePictureUrl: String
}

input PostInput {
  question: String!
  reviewers: [ReviewerInput!]!
}

input ReviewerInput {
  reviewerID: ID!
}

input CommentInput {
  comment: String!
  postID: ID!
}

input LikeInput {
  like: Boolean
  postID: ID!
}
